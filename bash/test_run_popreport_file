#!/bin/bash
#' ---
#' title: Test Run Popreport
#' date:  2020-06-23 15:02:21
#' author: Peter von Rohr
#' ---
#' ## Purpose
#' Testing run_popreport_file script {Write a paragraph about what problems are solved with this script.}
#'
#' ## Description
#' Testing run_popreportfile script {Write a paragraph about how the problems are solved.}
#'
#' ## Details
#'  {Give some more details here.}
#'
#' ## Example
#'  {Specify an example call of the script.}
#'
#' ## Set Directives
#' General behavior of the script is driven by the following settings
#+ bash-env-setting, eval=FALSE
set -o errexit    # exit immediately, if single command exits with non-zero status
set -o nounset    # treat unset variables as errors
set -o pipefail   # return value of pipeline is value of last command to exit with non-zero status
                  #  hence pipe fails if one command in pipe fails


#' ## Global Constants
#' ### Paths to shell tools
#+ shell-tools, eval=FALSE
ECHO=/bin/echo                             # PATH to echo                            #
DATE=/bin/date                             # PATH to date                            #
MKDIR=/bin/mkdir                           # PATH to mkdir                           #
BASENAME=/usr/bin/basename                 # PATH to basename function               #
DIRNAME=/usr/bin/dirname                   # PATH to dirname function                #

#' ### Directories
#' Installation directory of this script
#+ script-directories, eval=FALSE
INSTALLDIR=`$DIRNAME ${BASH_SOURCE[0]}`    # installation dir of bashtools on host   #

#' ### Files
#' This section stores the name of this script and the
#' hostname in a variable. Both variables are important for logfiles to be able to
#' trace back which output was produced by which script and on which server.
#+ script-files, eval=FALSE
SCRIPT=`$BASENAME ${BASH_SOURCE[0]}`       # Set Script Name variable                #
SERVER=`hostname`                          # put hostname of server in variable      #



#' ## Functions
#' The following definitions of general purpose functions are local to this script.
#'
#' ### Usage Message
#' Usage message giving help on how to use the script.
#+ usg-msg-fun, eval=FALSE
usage () {
  local l_MSG=$1
  $ECHO "Usage Error: $l_MSG"
  $ECHO "Usage: $SCRIPT -b <breed> -d <datafile> -m <male> -f <female> -y <dateformat> <datesep> -e <email> <tar> -I <incoming> -P <proj_dir> -D"
  $ECHO "  where -b <breed> ..."
  $ECHO "        -d <datafile> ..."
  $ECHO "        -m <male> ..."
  $ECHO "        -f <female>"
  $ECHO "        -y <dateformat> <datesep>"
  $ECHO "        -e <email> <tar>"
  $ECHO "        -I <incoming>"
  $ECHO "        -P <proj_dir>"
  $ECHO "        -D"
  $ECHO ""
  exit 1
}

#' ### Start Message
#' The following function produces a start message showing the time
#' when the script started and on which server it was started.
#+ start-msg-fun, eval=FALSE
start_msg () {
  $ECHO "********************************************************************************"
  $ECHO "Starting $SCRIPT at: "`$DATE +"%Y-%m-%d %H:%M:%S"`
  $ECHO "Server:  $SERVER"
  $ECHO
}

#' ### End Message
#' This function produces a message denoting the end of the script including
#' the time when the script ended. This is important to check whether a script
#' did run successfully to its end.
#+ end-msg-fun, eval=FALSE
end_msg () {
  $ECHO
  $ECHO "End of $SCRIPT at: "`$DATE +"%Y-%m-%d %H:%M:%S"`
  $ECHO "********************************************************************************"
}

#' ### Log Message
#' Log messages formatted similarly to log4r are produced.
#+ log-msg-fun, eval=FALSE
log_msg () {
  local l_CALLER=$1
  local l_MSG=$2
  local l_RIGHTNOW=`$DATE +"%Y%m%d%H%M%S"`
  $ECHO "[${l_RIGHTNOW} -- ${l_CALLER}] $l_MSG"
}


#' ## Main Body of Script
#' The main body of the script starts here.
#+ start-msg, eval=FALSE
start_msg

if [ -z $APIIS_HOME ]; then
    echo APIIS_HOME is not set
    exit
fi

BINDIR=${APIIS_HOME}/bin
LIBDIR=${APIIS_HOME}/lib/popreport
echo " *** run_poprep_file: BINDIR:     $BINDIR ..."
echo " *** run_poprep_file: LIBDIR:     $LIBDIR ..."


#' ## Getopts for Commandline Argument Parsing
#' If an option should be followed by an argument, it should be followed by a ":".
#' Notice there is no ":" after "h". The leading ":" suppresses error messages from
#' getopts. This is required to get my unrecognized option code to work.
#+ getopts-parsing, eval=FALSE
BREED=""
DATAFILE=""
EMAIL=""
MALE=""
FEMALE=""
DATEFORMAT=""
DATESEP=""
GETTAR=""
INCOMING=""
PROJ_DIR_BASE=""
DELETE=""
while getopts "b:d:e:m:f:y:s:g:I:P:Dh" FLAG; do
  case $FLAG in
    h)
      usage "Help message for $SCRIPT"
      ;;
    b) BREED=$OPTARG;;
    d) DATAFILE=$OPTARG;;
    e) EMAIL=$OPTARG;;
    m) MALE=$OPTARG;;
    f) FEMALE=$OPTARG;;
    y) DATEFORMAT=$OPTARG;;
    s) DATESEP=$OPTARG;;
    g) GETTAR=$OPTARG;;
    I) INCOMING=$OPTARG;;
    P) PROJ_DIR_BASE=$OPTARG;;
    D) DELETE=$OPTIND;;
    *) echo "Unknown parameter."; exit;;
    :)
      usage "-$OPTARG requires an argument"
      ;;
    ?)
      usage "Invalid command line argument (-$OPTARG) found"
      ;;
  esac
done

shift $((OPTIND-1))  #This tells getopts to move on to the next argument.


echo " *** run_poprep_file: Breed after getopts:     $BREED ..."
echo " *** run_poprep_file: DATAFILE after getopts:  $DATAFILE ..."
DIE=0
if [ -z "$BREED" ]; then echo "Parameter -b <BREED> missing"  ; DIE=1; fi
if [ -z "$DATAFILE" ];  then echo "Parameter -d <DATAFILE> missing"     ; DIE=1; fi
if [ -z "$EMAIL" ];  then echo "Parameter -e <EMAIL> missing" ; DIE=1; fi
if [ -z "$MALE" ];  then echo "Parameter -e <MALE> missing" ; DIE=1; fi
if [ -z "$FEMALE" ];  then echo "Parameter -e <FEMALE> missing" ; DIE=1; fi
if [ -z "$DATEFORMAT" ];  then echo "Parameter -e <DATEFORMAT> missing" ; DIE=1; fi
[ -n "$DELETE" ] && DELETE="-d"

echo " *** run_poprep_file: Breed after check:       $BREED ..."
echo " *** run_poprep_file: DATAFILE after check:    $DATAFILE ..."
echo " *** run_poprep_file: EMAIL after check:       $EMAIL ..."
echo " *** run_poprep_file: MALE after check :       $MALE ..."
echo " *** run_poprep_file: FEMALE after check :     $FEMALE ..."
echo " *** run_poprep_file: DATEFORMAT after check : $DATEFORMAT ..."
echo " *** run_poprep_file: DIE after check :        $DIE ..."
echo " *** run_poprep_file: DELETE after check :     $DELETE ..."

# datesep and get_tar can be empty
TAR=""
if [ "$GETTAR" == 'on' ]; then
    TAR="-t"
fi
if [ -n "$DATESEP" ]; then
    DATESEP="-s $DATESEP"
fi

if [ "$DIE" -eq 1 ]; then
    echo "Not enough parameters given!"
    usage
    exit 1
fi

echo " *** run_poprep_file: TAR after check :        $TAR ..."
echo " *** run_poprep_file: DATESEP after check :    $DATESEP ..."

$BINDIR/is_valid_email $EMAIL
case "$?" in
    0) ;;
    1) echo "No email address was supplied"; exit ;;
    2) echo "There is a syntactical error in the email address"; exit ;;
    3) echo "There are no DNS entries for the host in question (no MX records or A records)"; exit ;;
    4) echo "The toplevel domain check failed"; exit ;;
    5) echo "Your email has no valid fully qualified domain name"; exit ;;
    *) echo "Unspecified error with your mail address"; exit ;;
esac

# create a project/user with random name:
PROJ=`$BINDIR/mk_rand_string`

# create apiis project:
PROJ_DIR="${PROJ_DIR_BASE}/${PROJ}"

# for early debugging:
LOG="${PROJ_DIR}/run_popreport_file.debug"
LIST="${PROJ_DIR}/early.tex"

echo " *** run_poprep_file: PROJ after check :     $PROJ ..."
echo " *** run_poprep_file: PROJ_DIR after check : $PROJ_DIR ..."
echo " *** run_poprep_file: LOG after check :      $LOG ..."
echo " *** run_poprep_file: LIST after check :     $LIST ..."


#' ## End of Script
#+ end-msg, eval=FALSE
end_msg

